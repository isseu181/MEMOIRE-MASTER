# ================================
# app.py - D√©ploiement Streamlit (version am√©lior√©e)
# ================================
import streamlit as st
import pandas as pd
import joblib
import numpy as np

# ================================
# 1Ô∏è‚É£ Chargement du mod√®le et du scaler
# ================================
model_loaded = joblib.load("random_forest_model.pkl")
scaler_loaded = joblib.load("scaler.pkl")
features_loaded = joblib.load("features.pkl")  # Colonnes utilis√©es lors de l'entra√Ænement
optimal_threshold = 0.56  # Remplacer par le seuil trouv√© sur validation

# ================================
# 2Ô∏è‚É£ Titre de l'application
# ================================
st.title("üî¨ Pr√©diction de l'√©volution des patients dr√©panocytaires")
st.write("Remplissez les informations ci-dessous pour estimer le risque de complications.")

# ================================
# 3Ô∏è‚É£ Formulaire utilisateur
# ================================
def user_input_features():
    st.subheader("üìã Informations patient")

    data = {}

    # --- Variables num√©riques importantes ---
    data['√Çge de d√©but des signes (en mois)'] = st.slider("√Çge de d√©but des signes (mois)", 0, 200, 60)
    data['√Çge du debut d etude en mois (en janvier 2023)'] = st.slider("√Çge de l‚Äô√©tude (mois)", 0, 300, 120)
    data['√Çge de d√©couverte de la dr√©panocytose (en mois)'] = st.slider("√Çge d√©couverte dr√©panocytose (mois)", 0, 200, 50)
    data['GR (/mm3)'] = st.number_input("Globules rouges (GR /mm3)", min_value=1000000, max_value=7000000, value=4500000)
    data['GB (/mm3)'] = st.number_input("Globules blancs (GB /mm3)", min_value=2000, max_value=50000, value=10000)
    data['PLT (/mm3)'] = st.number_input("Plaquettes (PLT /mm3)", min_value=10000, max_value=1000000, value=300000)
    data['HB (g/dl)'] = st.slider("H√©moglobine (g/dl)", 0.0, 20.0, 10.0, 0.1)
    data["Taux d'Hb (g/dL)"] = st.slider("Taux Hb (g/dl)", 0.0, 20.0, 10.0, 0.1)
    data['CRP Si positive (Valeur)'] = st.slider("CRP (mg/L)", 0, 300, 10)
    data['% d\'Hb S'] = st.slider("% Hb S", 0, 100, 70)
    data['% d\'Hb F'] = st.slider("% Hb F", 0, 100, 5)

    # --- Variables cat√©gorielles binaires ---
    binary_vars = {
        'P√¢leur': "Pr√©sence de p√¢leur",
        'Souffle systolique fonctionnel': "Souffle systolique fonctionnel",
        'Vaccin contre m√©ningocoque': "Vaccin contre le m√©ningocoque",
        'Spl√©nom√©galie': "Spl√©nom√©galie",
        'Prophylaxie √† la p√©nicilline': "Prophylaxie √† la p√©nicilline",
        'Parents Salari√©s': "Parents salari√©s",
        'Prise en charge Hospitalisation': "Hospitalisation prise en charge",
        'Radiographie du thorax Oui ou Non': "Radiographie thorax",
        'Douleur provoqu√©e (Os.Abdomen)': "Douleur provoqu√©e",
        'Vaccin contre pneumocoque': "Vaccin contre le pneumocoque"
    }
    for col, label in binary_vars.items():
        data[col] = st.selectbox(label, ["NON", "OUI"])
        data[col] = 1 if data[col] == "OUI" else 0

    # --- Niveau d'urgence ---
    niveau_urgence = st.selectbox("Niveau d'urgence", ["Urgence1","Urgence2","Urgence3","Urgence4","Urgence5","Urgence6"])
    data['NiveauUrgence'] = int(niveau_urgence.replace("Urgence", ""))

    # --- Niveau d‚Äôinstruction ---
    niveau_sco = st.selectbox("Niveau de scolarit√©", ["NON","Maternelle ","El√©mentaire ","Secondaire","Enseignement Sup√©rieur "])
    mapping_sco = {"NON":0, "Maternelle ":1, "El√©mentaire ":2, "Secondaire":3, "Enseignement Sup√©rieur ":4}
    data["Niveau d'instruction scolarit√©"] = mapping_sco[niveau_sco]

    return pd.DataFrame([data])

# R√©cup√©ration des donn√©es utilisateur
new_data = user_input_features()

# ================================
# 4Ô∏è‚É£ Alignement des colonnes
# ================================
for col in features_loaded:
    if col not in new_data.columns:
        new_data[col] = 0

new_data = new_data[features_loaded]  # R√©ordonne les colonnes
new_data = new_data.astype(float)     # Conversion en float

# ================================
# 5Ô∏è‚É£ Standardisation + pr√©diction
# ================================
new_data_scaled = scaler_loaded.transform(new_data)
pred_proba = model_loaded.predict_proba(new_data_scaled)[:,1]
pred_class = (pred_proba >= optimal_threshold).astype(int)

# ================================
# 6Ô∏è‚É£ R√©sultats
# ================================
st.subheader("ü©∫ R√©sultat de la pr√©diction")
if pred_class[0] == 0:
    st.success(f"‚úÖ √âvolution pr√©dite : Favorable (probabilit√© de complications = {pred_proba[0]:.2f})")
else:
    st.error(f"‚ö†Ô∏è √âvolution pr√©dite : Complications (probabilit√© = {pred_proba[0]:.2f})")
