i# ================================
# deployment.py - D√©ploiement Random Forest 
# ================================
import streamlit as st
import pandas as pd
import joblib

def show_deployment():
    st.set_page_config(page_title="D√©ploiement Random Forest", layout="wide")

    # ---  Style CSS  ---
    st.markdown("""
        <style>
        body {
            background-color: #f5f9f6;
        }
        .stApp {
            background-color: #f5f9f6;
        }
        h1 {
            text-align: center;
            color: #0b6e4f;
            font-weight: bold;
        }
        .prediction-card {
            padding: 20px;
            border-radius: 15px;
            background-color: #e8f5e9;
            box-shadow: 0px 2px 10px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        .prediction-card-bad {
            padding: 20px;
            border-radius: 15px;
            background-color: #ffebee;
            box-shadow: 0px 2px 10px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        .reco {
            background-color: #ffffff;
            border-left: 5px solid #0b6e4f;
            padding: 15px;
            border-radius: 10px;
            margin-top: 10px;
        }
        .reco-bad {
            background-color: #ffffff;
            border-left: 5px solid #b71c1c;
            padding: 15px;
            border-radius: 10px;
            margin-top: 10px;
        }
        </style>
    """, unsafe_allow_html=True)

    st.markdown("<h1>ü©∫ D√©ploiement du Mod√®le Random Forest</h1>", unsafe_allow_html=True)

    # Charger mod√®le et scaler
    try:
        model = joblib.load("random_forest_model.pkl")
        scaler = joblib.load("scaler.pkl")
    except:
        st.error("Impossible de charger le mod√®le ou le scaler.")
        return

    # --- Variables ---
    quantitative_vars = [
        '√Çge de d√©but des signes (en mois)','GR (/mm3)','GB (/mm3)',
        '√Çge du debut d etude en mois (en janvier 2023)','VGM (fl/u3)','HB (g/dl)',
        'Nbre de GB (/mm3)','PLT (/mm3)','Nbre de PLT (/mm3)','TCMH (g/dl)',
        "Nbre d'hospitalisations avant 2017","Nbre d'hospitalisations entre 2017 et 2023",
        'Nbre de transfusion avant 2017','Nbre de transfusion Entre 2017 et 2023',
        'CRP Si positive (Valeur)',"Taux d'Hb (g/dL)","% d'Hb S","% d'Hb F"
    ]

    binary_vars = [
        'P√¢leur','Souffle systolique fonctionnel','Vaccin contre m√©ningocoque',
        'Spl√©nom√©galie','Prophylaxie √† la p√©nicilline','Parents Salari√©s',
        'Prise en charge Hospitalisation','Radiographie du thorax Oui ou Non',
        'Douleur provoqu√©e (Os.Abdomen)','Vaccin contre pneumocoque'
    ]

    model_features = model.feature_names_in_
    diagnostic_categories = [c.replace("Diagnostic Cat√©goris√©_", "") for c in model_features if "Diagnostic Cat√©goris√©_" in c]
    mois_categories = [c.replace("Mois_", "") for c in model_features if "Mois_" in c]

    st.markdown("### üë©‚Äç‚öïÔ∏è Remplissez le formulaire du patient pour estimer son √©volution clinique")

    # --- Dictionnaire des variables ---
    with st.expander("üìò Voir les d√©finitions des variables"):
        st.markdown("""
        **Variables biologiques :**
        - **GB (/mm¬≥)** : Taux de globules blancs mesur√© **en situation d‚Äôurgence**.
        - **PLT (/mm¬≥)** : Taux de plaquettes mesur√© **en urgence**.
        - **Nbre de GB (/mm¬≥)** : Valeur du nombre de globules blancs lors du **suivi r√©gulier**.
        - **Nbre de PLT (/mm¬≥)** : Valeur du nombre de plaquettes lors du **suivi r√©gulier**.
        - **HB (g/dl)** : Taux d‚Äôh√©moglobine mesur√©.
        - **CRP Si positive (Valeur)** : Valeur de la prot√©ine C-r√©active lorsqu‚Äôelle est positive.
        - **% d‚ÄôHb S / % d‚ÄôHb F** : R√©partition des fractions d‚Äôh√©moglobine.

        **Variables cliniques :**
        - **P√¢leur**, **Spl√©nom√©galie**, **Souffle systolique fonctionnel** : Observations cliniques binaires (1 = Oui, 0 = Non).
        - **Niveau d‚Äôurgence** : Cotation de 1 √† 6 indiquant la gravit√© clinique.
        - **Niveau d‚Äôinstruction scolarit√©** : Niveau de scolarisation du patient.

        **Autres :**
        - **Diagnostic cat√©goris√©** : Type principal de diagnostic.
        - **Mois** : Mois de la consultation ou du suivi.
        """)

    # --- FORMULAIRE ---
    with st.form("patient_form"):
        inputs = {}
        col1, col2 = st.columns(2)

        # --- Colonne 1 ---
        with col1:
            for var in quantitative_vars[:len(quantitative_vars)//2]:
                help_text = None
                if var == "GB (/mm3)":
                    help_text = "Taux de globules blancs mesur√© en urgence."
                elif var == "PLT (/mm3)":
                    help_text = "Taux de plaquettes mesur√© en urgence."
                elif var == "Nbre de GB (/mm3)":
                    help_text = "Valeur du nombre de globules blancs en suivi r√©gulier."
                elif var == "Nbre de PLT (/mm3)":
                    help_text = "Valeur du nombre de plaquettes en suivi r√©gulier."
                inputs[var] = st.number_input(var, value=0.0, format="%.2f", help=help_text)

            for var in binary_vars[:len(binary_vars)//2]:
                inputs[var] = st.selectbox(
                    f"{var} (OUI=1, NON=0)", 
                    options=[0,1],
                    help=f"Indique la pr√©sence ou non de {var.lower()}."
                )

        # --- Colonne 2 ---
        with col2:
            for var in quantitative_vars[len(quantitative_vars)//2:]:
                help_text = None
                if var == "GB (/mm3)":
                    help_text = "Taux de globules blancs mesur√© en urgence."
                elif var == "PLT (/mm3)":
                    help_text = "Taux de plaquettes mesur√© en urgence."
                elif var == "Nbre de GB (/mm3)":
                    help_text = "Valeur du nombre de globules blancs en suivi r√©gulier."
                elif var == "Nbre de PLT (/mm3)":
                    help_text = "Valeur du nombre de plaquettes en suivi r√©gulier."
                inputs[var] = st.number_input(var, value=0.0, format="%.2f", help=help_text)

            for var in binary_vars[len(binary_vars)//2:]:
                inputs[var] = st.selectbox(
                    f"{var} (OUI=1, NON=0)", 
                    options=[0,1],
                    help=f"Indique la pr√©sence ou non de {var.lower()}."
                )

            inputs['NiveauUrgence'] = st.slider(
                "Niveau d'urgence (1=Urgence1 ... 6=Urgence6)", 
                1, 6, 1,
                help="√âchelle d‚Äô√©valuation de la gravit√© clinique (1 = plus urgente, 6 = moins urgente)."
            )

            inputs["Niveau d'instruction scolarit√©"] = st.selectbox(
                "Niveau d'instruction scolarit√©",
                options=[0,1,2,3,4],
                format_func=lambda x: ["Non","Maternelle","√âl√©mentaire","Secondaire","Sup√©rieur"][x],
                help="Niveau de scolarisation du patient."
            )

            inputs["Diagnostic Cat√©goris√©"] = st.selectbox(
                "Diagnostic Cat√©goris√©", 
                options=diagnostic_categories,
                help="Type de diagnostic principal observ√©."
            )
            inputs["Mois"] = st.selectbox(
                "Mois", 
                options=mois_categories,
                help="Mois de r√©f√©rence de la consultation."
            )

        submitted = st.form_submit_button("üîÆ Pr√©dire")

    # --- PREDICTION ---
    if submitted:
        input_df = pd.DataFrame([inputs])
        input_df = pd.get_dummies(input_df, columns=["Diagnostic Cat√©goris√©","Mois"])

        for col in model_features:
            if col not in input_df.columns:
                input_df[col] = 0

        input_df = input_df[model_features]
        input_df[quantitative_vars] = scaler.transform(input_df[quantitative_vars])

        pred_proba = model.predict_proba(input_df)[:,1][0]
        pred_class = model.predict(input_df)[0]

        # --- R√©sultats et recommandations ---
        if pred_class == 0:
            st.markdown(f"""
            <div class="prediction-card">
                <h3>‚úÖ √âvolution pr√©vue : <b>Favorable</b></h3>
                <p>Probabilit√© de complication : <b>{pred_proba:.2f}</b></p>
            </div>
            <div class="reco">
                <h4> Recommandations :</h4>
                <ul>
                    <li>Maintenir le suivi m√©dical r√©gulier üìÖ</li>
                    <li>Conserver une bonne hygi√®ne de vie (alimentation, hydratation, repos)</li>
                    <li>Poursuivre la prophylaxie et les vaccinations üíâ</li>
                    <li>Informer le m√©decin en cas de changement d‚Äô√©tat ü©∫</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

        else:
            st.markdown(f"""
            <div class="prediction-card-bad">
                <h3>‚ö†Ô∏è √âvolution pr√©vue : <b>Complications possibles</b></h3>
                <p>Probabilit√© : <b>{pred_proba:.2f}</b></p>
            </div>
            <div class="reco-bad">
                <h4> Recommandations :</h4>
                <ul>
                    <li>Renforcer le suivi m√©dical rapproch√© üè•</li>
                    <li>R√©√©valuer la prophylaxie et le traitement üîç</li>
                    <li>Contr√¥ler plus fr√©quemment les param√®tres biologiques üß™</li>
                    <li>Contacter imm√©diatement le m√©decin en cas de fi√®vre, douleur, ou p√¢leur accrue üö®</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
