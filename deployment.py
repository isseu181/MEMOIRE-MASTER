i
# ================================
# deployment.py - D√©ploiement Random Forest
# ================================
import streamlit as st
import pandas as pd
import joblib

def show_deployment():
    st.set_page_config(page_title="D√©ploiement Random Forest", layout="wide")
    st.markdown("<h1 style='text-align:center;color:darkgreen;'>ü©∫ D√©ploiement - Mod√®le Random Forest</h1>", unsafe_allow_html=True)

    # -------------------------------
    # Charger le mod√®le et le scaler
    # -------------------------------
    try:
        model = joblib.load("random_forest_model.pkl")  # Mod√®le Random Forest sauvegard√©
        scaler = joblib.load("scaler.pkl")              # Scaler utilis√© pour les variables quantitatives
    except:
        st.error("‚ùå Impossible de charger le mod√®le ou le scaler. V√©rifiez les fichiers `random_forest_model.pkl` et `scaler.pkl`.")
        return

    # Variables quantitatives
    quantitative_vars = [
        '√Çge de d√©but des signes (en mois)','GR (/mm3)','GB (/mm3)',
        '√Çge du debut d etude en mois (en janvier 2023)','VGM (fl/u3)','HB (g/dl)',
        'Nbre de GB (/mm3)','PLT (/mm3)','Nbre de PLT (/mm3)','TCMH (g/dl)',
        "Nbre d'hospitalisations avant 2017","Nbre d'hospitalisations entre 2017 et 2023",
        'Nbre de transfusion avant 2017','Nbre de transfusion Entre 2017 et 2023',
        'CRP Si positive (Valeur)',"Taux d'Hb (g/dL)","% d'Hb S","% d'Hb F"
    ]

    # Variables binaires
    binary_vars = [
        'P√¢leur','Souffle systolique fonctionnel','Vaccin contre m√©ningocoque',
        'Spl√©nom√©galie','Prophylaxie √† la p√©nicilline','Parents Salari√©s',
        'Prise en charge Hospitalisation','Radiographie du thorax Oui ou Non',
        'Douleur provoqu√©e (Os.Abdomen)','Vaccin contre pneumocoque'
    ]

    st.markdown("### üìù Remplissez le formulaire pour pr√©dire l‚Äô√©volution clinique d‚Äôun patient.")

    # Extraire les cat√©gories exactes du mod√®le entra√Æn√©
    model_features = model.feature_names_in_
    diagnostic_cols = [c for c in model_features if "Diagnostic Cat√©goris√©_" in c]
    mois_cols = [c for c in model_features if "Mois_" in c]

    # Extraire les cat√©gories originales pour le formulaire
    diagnostic_categories = [c.replace("Diagnostic Cat√©goris√©_", "") for c in diagnostic_cols]
    mois_categories = [c.replace("Mois_", "") for c in mois_cols]

    # -------------------------------
    # Formulaire patient
    # -------------------------------
    with st.form("patient_form"):
        col1, col2 = st.columns(2)

        # Colonne 1 : Variables quantitatives
        with col1:
            st.subheader("üìä Variables quantitatives")
            quantitative_inputs = {}
            for var in quantitative_vars:
                quantitative_inputs[var] = st.number_input(var, value=0.0, format="%.2f")

        # Colonne 2 : Variables qualitatives / ordinales / cat√©gorielles
        with col2:
            st.subheader("‚öñÔ∏è Variables qualitatives / ordinales / cat√©gorielles")

            # Variables binaires
            binary_inputs = {}
            for var in binary_vars:
                binary_inputs[var] = st.selectbox(var, options=[0,1])

            # Variables ordinales
            niveau_urgence = st.slider("Niveau d'urgence (1=Urgence1 ... 6=Urgence6)", 1, 6, 1)
            niveau_instruction = st.selectbox(
                "Niveau d'instruction scolarit√©",
                options=[0,1,2,3,4],
                format_func=lambda x: ["Non","Maternelle","El√©mentaire","Secondaire","Sup√©rieur"][x]
            )

            # Variables cat√©gorielles
            diagnostic = st.selectbox("Diagnostic Cat√©goris√©", options=diagnostic_categories)
            mois = st.selectbox("Mois", options=mois_categories)

        submitted = st.form_submit_button("üîÆ Pr√©dire")

    # -------------------------------
    # Pr√©diction
    # -------------------------------
    if submitted:
        input_dict = {**quantitative_inputs, **binary_inputs,
                      'NiveauUrgence': niveau_urgence,
                      "Niveau d'instruction scolarit√©": niveau_instruction,
                      "Diagnostic Cat√©goris√©": diagnostic,
                      "Mois": mois}

        input_df = pd.DataFrame([input_dict])

        # Encodage dummies identique √† l'entra√Ænement
        input_df = pd.get_dummies(input_df, columns=["Diagnostic Cat√©goris√©","Mois"])

        # Ajouter les colonnes manquantes avec 0
        for col in model_features:
            if col not in input_df.columns:
                input_df[col] = 0

        # R√©ordonner les colonnes pour correspondre au mod√®le
        input_df = input_df[model_features]

        # Standardisation des variables quantitatives
        input_df[quantitative_vars] = scaler.transform(input_df[quantitative_vars])

        # Pr√©diction
        pred_proba = model.predict_proba(input_df)[:,1][0]
        pred_class = model.predict(input_df)[0]

        # -------------------------------
        # R√©sultat visuel
        # -------------------------------
        st.subheader("üìå R√©sultat de la pr√©diction")
        if pred_class == 0:
            st.success(f"‚úÖ √âvolution pr√©vue : **Favorable** (Probabilit√© de complication : {pred_proba:.2f})")
        else:
            st.error(f"‚ö†Ô∏è √âvolution pr√©vue : **Complications attendues** (Probabilit√© : {pred_proba:.2f})")


